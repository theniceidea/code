package com.code.ptool

import cn.hutool.core.io.FileUtil
import cn.hutool.core.util.StrUtil
import com.alibaba.fastjson.JSONObject
import com.google.common.base.CaseFormat
import kotlin.io.path.Path

class TableInfo(val targetName:String, val prefix:String, val name:String, val idTag:String, val jsonText:String, val project: Project) {
    var className=""
    var listInterfaceName=""
    val entityImports=ArrayList<String>()
    val sqlImports=ArrayList<String>()
    val fields=ArrayList<FieldInfo>()
    var comment=""
    var entityPkg=""
    var entityDir=""
    var queryPkg=""
    var queryDir=""
    init {
        entityPkg="${project.entityPkg}.${targetName}"
        entityDir="${project.entityDir}.${targetName}"
        queryPkg="${project.queryPkg}.${targetName}"
        queryDir="${project.queryDir}.${targetName}"
        if(prefix.isNotBlank()){
            className= CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, name.substring(prefix.length))
        }else{
            className= CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, name)
        }
        listInterfaceName="I${className}List"
        initFields()
    }
    fun initFields(){
        val json = JSONObject.parseObject(jsonText)
        this.comment=json.getString("comment")
        val entityImportsJsonArray = json.getJSONArray("entityImports")?:ArrayList(0)
        for(jo in entityImportsJsonArray){
            entityImports.add(jo.toString())
        }
        val sqlImportsJsonArray = json.getJSONArray("sqlImports")?:ArrayList(0)
        for(jo in sqlImportsJsonArray){
            sqlImports.add(jo.toString())
        }
        val fieldsJsonArray = json.getJSONArray("fields")
        for(jo in fieldsJsonArray){
            if(jo !is JSONObject){
                continue
            }
            val fname = jo.getString("name")
            val type = Util.convertJavaType(jo.getString("type"))
            val ref=jo.getString("ref")?:""
            val refColumn=jo.getString("refColumn")?:""
//            val inc = jo.getBoolean("inc") ?: false
            val insertGenerate = jo.getString("insertGenerate")?:""
            val fcomment = jo.getString("comment")
            val annos = jo.getJSONArray("annotations")
            var annolist = ArrayList<AnnoInfo>();
            if (null != annos) {
                for(janno in annos){
                    if(janno !is JSONObject){
                        throw RuntimeException("annotation is not JSONObject table: ${this.name} field: ${fname} anno: $janno")
                    }
                    val entry = janno.entries.firstOrNull() ?: continue
                    var attr=if(null == entry.value || entry.value !is JSONObject) HashMap<String, Any>() else entry.value as JSONObject
                    annolist.add(AnnoInfo(entry.key, attr))
                }
            }
            if((ref=="" && refColumn != "") || (ref != "" && refColumn=="")){
                throw RuntimeException("ref和refColumn 要么都为空,要么都不为空")
            }
            val lowerCamelName= CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, fname)
            val enumName = "Enum_${className}_${lowerCamelName}"
            fields.add(FieldInfo(fname, insertGenerate, type, annolist, project.readEnum(jo, enumName), ref, refColumn, fcomment))
        }
    }
    fun buildEntity(){
        val builder = StringBuilder()
        builder.appendLine("package ${this.entityPkg};")
        builder.appendLine()
        for(imp in entityImports){
            builder.appendLine(imp)
        }
        builder.appendLine()
        builder.appendLine("/**")
        builder.appendLine("* ${this.comment}")
        builder.appendLine("*/")
//        builder.appendLine("@Getter")
//        builder.appendLine("@Setter")
        builder.appendLine("@Table(\"${name}\")")
//        builder.appendLine("@Builder")
        builder.appendLine("public class ${className} extends Entity{")
        for(fi in fields){
            builder.appendLine("//    entity.set${fi.upperCamelName}();")
        }
        builder.appendLine("//    entity")
        for(fi in fields){
            builder.appendLine("//        .${fi.lowerCamelName}()")
        }
        for(fi in fields){
//            if(fi.name=="id"){
//                continue
//            }
            val tab="\t"
            builder.appendLine("${tab}/**")
            builder.appendLine("${tab}* ${fi.comment}")
            builder.appendLine("${tab}*/")
            for(anno in fi.annos){
                builder.appendLine("${tab}${anno.toJavaAnnoString()}")
            }
            builder.appendLine("${tab}@Column(\"${fi.name}\")")
            builder.appendLine("${tab}private ${fi.dataType} ${fi.lowerCamelName};")
            builder.appendLine("${tab}public static final String _${fi.lowerCamelName}=\"${fi.name}\";")
        }
        for(fi in fields){
            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            val getterStr=if(fi.dataType.lowercase()=="boolean") "is" else "get"
            builder.appendLine("    public ${fi.dataType} ${getterStr}${fi.upperCamelName}(){")
            builder.appendLine("        return this.${fi.lowerCamelName};")
            builder.appendLine("    }")
            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public void set${fi.upperCamelName}(${fi.dataType} value){")
            builder.appendLine("        this.${fi.lowerCamelName}=value;")
            builder.appendLine("    }")
            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public boolean ${fi.lowerCamelName}_is(${fi.dataType} value){")
            builder.appendLine("        return Objects.equals(this.${fi.lowerCamelName}, value);")
            builder.appendLine("    }")
            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${className} ${fi.lowerCamelName}(${fi.dataType} value){")
            builder.appendLine("        this.${fi.lowerCamelName}=value;")
            builder.appendLine("        return this;")
            builder.appendLine("    }")
            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public FieldValid<${className}, ${fi.dataType}> ${fi.lowerCamelName}_fv(${fi.dataType} value){")
            builder.appendLine("        return new FieldValid<>(this, value, () -> ${fi.lowerCamelName}(value));")
            builder.appendLine("    }")

//            builder.appendLine("    /**")
//            builder.appendLine("    * ${fi.comment}")
//            builder.appendLine("    */")
//            builder.appendLine("    public ${className} ${fi.lowerCamelName}(${fi.dataType} value, IValidatorSuccess<${fi.dataType}> ... ivs){")
//            builder.appendLine("        if(null != ivs){")
//            builder.appendLine("            for(IValidatorSuccess<${fi.dataType}> itm : ivs){")
//            builder.appendLine("                if(!itm.isValidSuccess(value)){")
//            builder.appendLine("                    return this;")
//            builder.appendLine("                }")
//            builder.appendLine("            }")
//            builder.appendLine("        }")
//            builder.appendLine("")
//            builder.appendLine("        this.${fi.lowerCamelName}=value;")
//            builder.appendLine("        return this;")
//            builder.appendLine("    }")

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${className} ${fi.lowerCamelName}_valid(IValidator<${fi.dataType}> validator, String msg){")
            builder.appendLine("        validator.valid(this.${fi.lowerCamelName}, msg);")
            builder.appendLine("        return this;")
            builder.appendLine("    }")

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment} 如果为null返回默认值 value or default")
            builder.appendLine("    */")

            var dataType2 = fi.dataType
            if(fi.dataType=="Integer"){
                dataType2="int"
            }else if(fi.dataType=="Long"){
                dataType2="long"
            }else if(fi.dataType=="Double"){
                dataType2="double"
            }

            builder.appendLine("    public ${dataType2} ${fi.lowerCamelName}_vd(){")
            builder.appendLine("        if(null==this.${fi.lowerCamelName}){")
            if(fi.dataType=="String") {
                builder.appendLine("            return \"\";")
            }else if(fi.dataType=="Integer"){
                builder.appendLine("            return 0;")
            }else if(fi.dataType=="Long"){
                builder.appendLine("            return 0L;")
            }else if(fi.dataType=="Double"){
                builder.appendLine("            return 0D;")
            }else if(fi.dataType=="BigDecimal"){
                builder.appendLine("            return BigDecimal.ZERO;")
            }else if(fi.dataType=="Timestamp"){
                builder.appendLine("            throw new RuntimeException(\"不支持此类型的默认值, 请手动指定默认值\");")
            }else{
                throw RuntimeException("不支持的基本类型 : ${fi.dataType}")
            }

            builder.appendLine("        }")
            builder.appendLine("        return this.${fi.lowerCamelName};")
            builder.appendLine("    }")
            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment} 如果为null返回默认值 value or default")
            builder.appendLine("    */")
            builder.appendLine("    public ${dataType2} ${fi.lowerCamelName}_vd(${dataType2} defaultValue){")
            builder.appendLine("        if(null==this.${fi.lowerCamelName}){")
            builder.appendLine("            return defaultValue;")
            builder.appendLine("        }")
            builder.appendLine("        return this.${fi.lowerCamelName};")
            builder.appendLine("    }")


            if(null != fi.enumInfo){
                for(itm in fi.enumInfo.enums){
                    builder.appendLine("    /**")
                    builder.appendLine("    * ${fi.comment} ${itm.comment}")
                    builder.appendLine("    */")
                    builder.appendLine("    public void set${fi.upperCamelName}_${itm.name}(){")
                    if(fi.dataType=="String"){
                        builder.appendLine("        this.${fi.lowerCamelName}=\"${itm.value.toString().replace("\"", "\\\"")}\";")
                    }else {
                        builder.appendLine("        this.${fi.lowerCamelName}=${itm.value};")
                    }
                    builder.appendLine("    }")

                    builder.appendLine("    /**")
                    builder.appendLine("    * ${fi.comment} ${itm.comment}")
                    builder.appendLine("    */")
                    builder.appendLine("    public ${className} ${fi.lowerCamelName}_${itm.name}(){")
                    if(fi.dataType=="String"){
                        builder.appendLine("        this.${fi.lowerCamelName}=\"${itm.value.toString().replace("\"", "\\\"")}\";")
                    }else {
                        builder.appendLine("        this.${fi.lowerCamelName}=${itm.value};")
                    }
                    builder.appendLine("        return this;")
                    builder.appendLine("    }")

                    builder.appendLine("    /**")
                    builder.appendLine("    * ${fi.comment} ${itm.comment}")
                    builder.appendLine("    */")
                    builder.appendLine("    public boolean ${fi.lowerCamelName}_is_${itm.name}(){")
                    if(fi.dataType=="String"){
                        builder.appendLine("        return Objects.equals(this.${fi.lowerCamelName}, \"${itm.value.toString().replace("\"", "\\\"")}\");")
                    }else {
                        builder.appendLine("        return Objects.equals(this.${fi.lowerCamelName}, ${itm.value});")
                    }
                    builder.appendLine("    }")
                }
            }
            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public boolean ${fi.lowerCamelName}_isNull(){")
            builder.appendLine("        return null==this.${fi.lowerCamelName};")
            builder.appendLine("    }")
            if(fi.dataType=="String") {
                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public boolean ${fi.lowerCamelName}_isBlank(){")
                builder.appendLine("        return StrUtil.isBlank(this.${fi.lowerCamelName});")
                builder.appendLine("    }")
            }
            builder.appendLine("")

        }
        builder.appendLine("}")
        val toFile = Path(this.entityDir, "${className}.java").toFile()
        FileUtil.writeUtf8String(builder.toString(), toFile)
    }
    fun buildSql(){
        val builder = StringBuilder()
        val sqlClassName="Sql"+className
        val sqlClassInstName="sql"+className
        builder.appendLine("package ${this.queryPkg};")
        builder.appendLine()
        for(imp in sqlImports){
            builder.appendLine(imp)
        }
        builder.appendLine()
        builder.appendLine("/**")
        builder.appendLine("* ${this.comment}")
        builder.appendLine("*/")
        builder.appendLine("public class ${sqlClassName} implements QuerySelect {")
        builder.appendLine("    private static final String ID_SUFFIX=\"${this.idTag}\";")
        builder.appendLine("    private static Object DB_TARGET=null;")
        builder.appendLine("    private Object instDbTarget__ =null;")
//        builder.appendLine("    private static boolean DS_INITED=false;")

        val insertSqlBuilder1=StringBuilder("    private static final String SQL_INSERT=\"INSERT INTO ${name}(")
        val insertSqlBuilder2=StringBuilder()
        val insertFieldBuilder=StringBuilder()
        val updateSqlBuilder=StringBuilder("    private static final String SQL_UPDATE=\"UPDATE ${name} SET ")
        val updateFieldBuilder=StringBuilder()
        val idColumns = fields.filter { fi -> fi.annos.any { it.name=="IdColumn" } }
        if(idColumns.size>1){
            throw RuntimeException("表${className} 不允许有多个列")
        }
        val idColumn = idColumns.firstOrNull() ?: throw RuntimeException("表${className} 缺少id列")
        val deleteSqlBuilder=StringBuilder("    private static final String SQL_DELETE=\"DELETE ${name} WHERE ${idColumn.name}=?\";")
        var insertBln=false
        var updateBln=false
        var insertCount=0
        var updateCount=0
        for(fi in fields){
            var skipInsert= fi.annos.any { it.name == "SkipInsert" }
            var skipUpdate= fi.annos.any { it.name == "SkipUpdate" || it.name == "Increment" }
            if(!skipInsert){
                if(!insertBln){
                    insertBln=true
                }else{
                    insertSqlBuilder1.append(",")
                    insertSqlBuilder2.append(",")
                }
                insertSqlBuilder1.append("${fi.name}")
                insertSqlBuilder2.append("?")
                if(fi.insertGenerate != ""){
                    insertFieldBuilder.appendLine("        values.add(${fi.insertGenerate});")
                }else {
                    insertFieldBuilder.appendLine("        values.add(entity.get${fi.upperCamelName}());")
                }
                insertCount=insertCount+1
            }
            if(!skipUpdate){
                if(!updateBln){
                    updateBln=true
                }else{
                    updateSqlBuilder.append(",")
                }
                updateSqlBuilder.append("${fi.name}=?")
                updateFieldBuilder.appendLine("        values.add(entity.get${fi.upperCamelName}());")
                updateCount=updateCount+1
            }
        }
        insertSqlBuilder1.append(")values(")
        insertSqlBuilder1.append(insertSqlBuilder2)
        insertSqlBuilder1.append(")\";")

        updateSqlBuilder.append(" WHERE ${idColumn.name}=?\";")
        updateFieldBuilder.appendLine("        values.add(entity.get${idColumn.upperCamelName}());")

        builder.appendLine(insertSqlBuilder1)
        builder.appendLine(updateSqlBuilder)
        builder.appendLine(deleteSqlBuilder)
//        builder.appendLine("    private String table=\"${name}\";")
        builder.appendLine("    private boolean existsWhere=false;")
        builder.appendLine("    private boolean existsOrderBy=false;")
        builder.appendLine("    private StringBuilder builder=new StringBuilder();")
        builder.appendLine("    private StringBuilder orderBuilder=new StringBuilder();")
//        builder.appendLine("    private StringBuilder countBuilder=new StringBuilder();")
        builder.appendLine("    private List<Object> parameters =new ArrayList<>();")
        builder.appendLine("    private List<IncUpdateValue> incValues=null;")
        builder.appendLine("    private Object ds(){")
        builder.appendLine("        if(null != instDbTarget__){")
        builder.appendLine("            return instDbTarget__;")
        builder.appendLine("        }")
        builder.appendLine("")
        builder.appendLine("        if(null != DB_TARGET){")
        builder.appendLine("            return DB_TARGET;")
        builder.appendLine("        }")
//        builder.appendLine("        DS_INITED=true;")
        builder.appendLine("        DB_TARGET=DaoJdbcTemplate.s(\"${this.targetName}\");")
        builder.appendLine("        return DB_TARGET;")
        builder.appendLine("    }")
        builder.appendLine("")
        builder.appendLine("    public ${sqlClassName} changeDbTarget(String name){")
        builder.appendLine("        instDbTarget__ =DaoJdbcTemplate.s(name);")
        builder.appendLine("        return this;")
        builder.appendLine("    }")
        builder.appendLine("")
        builder.appendLine("    public static ${sqlClassName} inst(){")
        builder.appendLine("        final ${sqlClassName} ${sqlClassInstName} = new ${sqlClassName}();")
//        builder.appendLine("        ${sqlClassInstName}.initSql();")
        builder.appendLine("        return ${sqlClassInstName};")
        builder.appendLine("    }")


        builder.appendLine("    ")
        builder.appendLine("    private void addIncValue(String fieldName, Object value){")
        builder.appendLine("        if(null==incValues){")
        builder.appendLine("            incValues=new ArrayList<>(2);")
        builder.appendLine("        }")
        builder.appendLine("        final IncUpdateValue iuv = new IncUpdateValue();")
        builder.appendLine("        iuv.setFieldName(fieldName);")
        builder.appendLine("        iuv.setValue(value);")
        builder.appendLine("        incValues.add(iuv);")
        builder.appendLine("    }")

        builder.appendLine("    public int executeIncrementUnChangeThrow(String msg){")
        builder.appendLine("        final int count = executeIncrement();")
        builder.appendLine("        if(count<=0){")
        builder.appendLine("            throw Excep.le(msg);")
        builder.appendLine("        }")
        builder.appendLine("        return count;")
        builder.appendLine("    }")
        builder.appendLine("")
        builder.appendLine("    public int executeIncrement(){")
//        builder.appendLine("        if(this.parameters.size()<=0){")
//        builder.appendLine("            throw new RuntimeException(\"执行 executeIncrement 必须添加id等条件\");")
//        builder.appendLine("        }")
        builder.appendLine("        StringBuilder buf=new StringBuilder(\"UPDATE ${name} SET\");")
        builder.appendLine("        boolean bln=false;")
        builder.appendLine("        List<Object> values=new ArrayList<>();")
        builder.appendLine("        for(IncUpdateValue iuv : incValues){")
        builder.appendLine("            if(!bln){")
        builder.appendLine("                bln=true;")
        builder.appendLine("            }else{")
        builder.appendLine("                buf.append(\",\");")
        builder.appendLine("            }")
        builder.appendLine("            buf.append(\" \");")
        builder.appendLine("            buf.append(iuv.getFieldName());")
        builder.appendLine("            buf.append(\"=\");")
        builder.appendLine("            buf.append(iuv.getFieldName());")
        builder.appendLine("            buf.append(\"+?\");")
        builder.appendLine("            values.add(iuv.getValue());")
        builder.appendLine("        }")
//        builder.appendLine("        buf.append(\" WHERE ${idColumn.name}=?\");")
//        builder.appendLine("        values.add(${idColumn.lowerCamelName});")
        builder.appendLine("        buf.append(builder);")
        builder.appendLine("        values.addAll(parameters);")
//        builder.appendLine("")
        builder.appendLine("")
        builder.appendLine("        return DaoExecuteChangeSql.s(ds(), buf.toString(), values);")
        builder.appendLine("    }")

        builder.appendLine("    public int save(${className} entity){")
        builder.appendLine("        if(null==entity.get${idColumn.upperCamelName}()){")
        builder.appendLine("            return insert(entity);")
        builder.appendLine("        }else{")
        builder.appendLine("            return update(entity);")
        builder.appendLine("        }")
        builder.appendLine("    }")

        builder.appendLine("    private int insert(${className} entity){")
        builder.appendLine("        List<Object> values = new ArrayList<>(${insertCount});")
        builder.appendLine(insertFieldBuilder)
        builder.appendLine("        int retNum = DaoExecuteChangeSql.s(ds(), SQL_INSERT, values);")
        if(idColumn.annos.any{it.name=="AutoIncrement"}) {
            builder.appendLine("        Map<String, Object> map = DaoMap4Sql.s(ds(), \"SELECT LAST_INSERT_ID() 'id'\", new ArrayList<>(0), \"\");")
            builder.appendLine("        final Object id = map.get(\"id\");")
//            builder.appendLine("        if(id instanceof BigInteger){")
            if(idColumn.dataType=="Integer"){
                builder.appendLine("        entity.set${idColumn.upperCamelName}(((BigInteger)id).intValue());")
//                builder.appendLine("            throw new RuntimeException(\"数据库${idColumn.name}字段类型与java对象不匹配\");")
            }else if(idColumn.dataType=="Long"){
                builder.appendLine("        entity.set${idColumn.upperCamelName}(((BigInteger)id).longValue());")
            }else
                throw RuntimeException("自增类型字段只支持Integer和Long")
//            builder.appendLine("        }else if(id instanceof Integer){")
//            if(idColumn.dataType=="Integer"){
//                builder.appendLine("            entity.set${idColumn.upperCamelName}((Integer)id);")
//            }else if(idColumn.dataType=="Long"){
//                builder.appendLine("            throw new RuntimeException(\"数据库${idColumn.name}字段类型与java对象不匹配\");")
//            }else throw RuntimeException("自增类型字段只支持Integer和Long")
//            builder.appendLine("        }")
        }
        builder.appendLine("        return retNum;")
        builder.appendLine("    }")
        builder.appendLine("    private int update(${className} entity){")
        builder.appendLine("        List<Object> values = new ArrayList<>(${updateCount+1});")
        builder.appendLine(updateFieldBuilder)
        builder.appendLine("        return DaoExecuteChangeSql.s(ds(), SQL_UPDATE, values);")
        builder.appendLine("    }")
        builder.appendLine("    ")

        builder.appendLine("    public int del(${className} entity){")
        builder.appendLine("        List<Object> values = new ArrayList<>(1);")
        builder.appendLine("        values.add(entity.get${idColumn.upperCamelName}());")
        builder.appendLine("        return DaoExecuteChangeSql.s(ds(), SQL_DELETE, values);")
        builder.appendLine("    }")

        builder.appendLine("    public ${className} queryOne(){")
//        builder.appendLine("        StringBuilder buf=new StringBuilder();")
//        builder.appendLine("        buf.append(\"SELECT * FROM ${name}\");")
//        builder.appendLine("        buf.append(builder);")
        builder.appendLine("        final List<${className}> list = DaoList.s(ds(), ${className}.class, this, 0, 1);")
        builder.appendLine("        return list.size()>0?list.get(0):null;")
        builder.appendLine("    }")

        builder.appendLine("    public List<${className}> queryList(){")
//        builder.appendLine("        StringBuilder buf=new StringBuilder();")
//        builder.appendLine("        buf.append(\"SELECT * FROM ${name}\");")
//        builder.appendLine("        buf.append(builder);")
        builder.appendLine("        return DaoList.s(ds(), ${className}.class, this);")
        builder.appendLine("    }")

        builder.appendLine("    public List<${className}> queryList(int start, int limit){")
//        builder.appendLine("        StringBuilder buf=new StringBuilder();")
//        builder.appendLine("        buf.append(\"SELECT * FROM ${name}\");")
//        builder.appendLine("        buf.append(builder);")
        builder.appendLine("        return DaoList.s(ds(), ${className}.class, this, start, limit);")
        builder.appendLine("    }")

        builder.appendLine("    public PageResultList<${className}> queryPageList(int start, int limit){")
//        builder.appendLine("        StringBuilder buf=new StringBuilder();")
//        builder.appendLine("        buf.append(\"SELECT * FROM ${name}\");")
//        builder.appendLine("        buf.append(builder);")
        builder.appendLine("        return DaoPageList.s(ds(), ${className}.class, this, start, limit);")
        builder.appendLine("    }")


//        builder.appendLine("    private void initSql(){")
//        builder.appendLine("        String pre=\"\";")
//        builder.appendLine("        builder.append(\"SELECT * FROM ${name}\");")
//        builder.appendLine("    }")
        for(fi in fields){
//            if(StrUtil.equalsAny(fi.dataType, "")) {
            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_eq(boolean cdn, ${fi.dataType} value){")
            builder.appendLine("        if(!cdn) return this;")
            builder.appendLine("        return ${fi.lowerCamelName}_eq(value);")
            builder.appendLine("    }")

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_eq(${fi.dataType} value){")
            builder.appendLine("        String pre=\"\";")
            builder.appendLine("        if(existsWhere){")
            builder.appendLine("            pre=\" AND\";")
            builder.appendLine("        }else{")
            builder.appendLine("            pre=\" WHERE\";")
            builder.appendLine("            existsWhere=true;")
            builder.appendLine("        }")
            builder.appendLine("        builder.append(pre+\" ${fi.name}=?\");")
            builder.appendLine("        parameters.add(value);")
            builder.appendLine("        return this;")
            builder.appendLine("    }")

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public FieldValid<${sqlClassName}, ${fi.dataType}> ${fi.lowerCamelName}_eq_fv(${fi.dataType} value){")
            builder.appendLine("        return new FieldValid<>(this, value, () -> ${fi.lowerCamelName}_eq(value));")
            builder.appendLine("    }")
//
//            builder.appendLine("    /**")
//            builder.appendLine("    * ${fi.comment}")
//            builder.appendLine("    */")
//            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_eq(${fi.dataType} value, IValidatorSuccess<${fi.dataType}> ... ivs){")
//            builder.appendLine("        if(null != ivs){")
//            builder.appendLine("            for(IValidatorSuccess<${fi.dataType}> itm : ivs){")
//            builder.appendLine("                if(!itm.isValidSuccess(value)){")
//            builder.appendLine("                    return this;")
//            builder.appendLine("                }")
//            builder.appendLine("            }")
//            builder.appendLine("        }")
//            builder.appendLine("")
//            builder.appendLine("        return ${fi.lowerCamelName}_eq(value);")
//            builder.appendLine("    }")


            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_notNull_eq(${fi.dataType} value){")
            builder.appendLine("        return ${fi.lowerCamelName}_eq(null != value, value);")
            builder.appendLine("    }")
            if(StrUtil.equalsAny(fi.dataType, "Timestamp")) {
                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment} 把value时间小时及之后的部分舍弃只留年月日,再查询")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_eq_yyyyMMdd(boolean cdn, ${fi.dataType} value){")
                builder.appendLine("        if(!cdn) return this;")
                builder.appendLine("        return ${fi.lowerCamelName}_eq_yyyyMMdd(value);")
                builder.appendLine("    }")
                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment} 把value时间小时及之后的部分舍弃只留年月日,再查询")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_eq_yyyyMMdd(${fi.dataType} value){")
                builder.appendLine("        value=DateUtil.beginOfDay(value).toTimestamp();")
                builder.appendLine("        return ${fi.lowerCamelName}_eq(value);")
                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public FieldValid<${sqlClassName}, ${fi.dataType}> ${fi.lowerCamelName}_eq_yyyyMMdd_fv(${fi.dataType} value){")
                builder.appendLine("        return new FieldValid<>(this, value, () -> ${fi.lowerCamelName}_eq_yyyyMMdd(value));")
                builder.appendLine("    }")
//
//                builder.appendLine("    /**")
//                builder.appendLine("    * ${fi.comment}")
//                builder.appendLine("    */")
//                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_eq_yyyyMMdd(${fi.dataType} value, IValidatorSuccess<${fi.dataType}> ... ivs){")
//                builder.appendLine("        if(null != ivs){")
//                builder.appendLine("            for(IValidatorSuccess<${fi.dataType}> itm : ivs){")
//                builder.appendLine("                if(!itm.isValidSuccess(value)){")
//                builder.appendLine("                    return this;")
//                builder.appendLine("                }")
//                builder.appendLine("            }")
//                builder.appendLine("        }")
//                builder.appendLine("")
//                builder.appendLine("        return ${fi.lowerCamelName}_eq_yyyyMMdd(value);")
//                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment} 把value时间小时及之后的部分舍弃只留年月日,再查询")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_notNull_eq_yyyyMMdd(${fi.dataType} value){")
                builder.appendLine("        return ${fi.lowerCamelName}_eq_yyyyMMdd(null != value, value);")
                builder.appendLine("    }")
            }
//            }

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_isdb_null(boolean cdn){")
            builder.appendLine("        if(!cdn) return this;")
            builder.appendLine("        return ${fi.lowerCamelName}_isdb_null();")
            builder.appendLine("    }")
            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_isdb_null(){")
            builder.appendLine("        String pre=\"\";")
            builder.appendLine("        if(existsWhere){")
            builder.appendLine("            pre=\" AND\";")
            builder.appendLine("        }else{")
            builder.appendLine("            pre=\" WHERE\";")
            builder.appendLine("            existsWhere=true;")
            builder.appendLine("        }")
            builder.appendLine("        builder.append(pre+\" ${fi.name} is null\");")
            builder.appendLine("        return this;")
            builder.appendLine("    }")

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_isdb_not_null(boolean cdn){")
            builder.appendLine("        if(!cdn) return this;")
            builder.appendLine("        return ${fi.lowerCamelName}_isdb_not_null();")
            builder.appendLine("    }")
            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_isdb_not_null(){")
            builder.appendLine("        String pre=\"\";")
            builder.appendLine("        if(existsWhere){")
            builder.appendLine("            pre=\" AND\";")
            builder.appendLine("        }else{")
            builder.appendLine("            pre=\" WHERE\";")
            builder.appendLine("            existsWhere=true;")
            builder.appendLine("        }")
            builder.appendLine("        builder.append(pre+\" ${fi.name} is not null\");")
            builder.appendLine("        return this;")
            builder.appendLine("    }")

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_gt(boolean cdn, ${fi.dataType} value){")
            builder.appendLine("        if(!cdn) return this;")
            builder.appendLine("        return ${fi.lowerCamelName}_gt(value);")
            builder.appendLine("    }")
            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_gt(${fi.dataType} value){")
            builder.appendLine("        String pre=\"\";")
            builder.appendLine("        if(existsWhere){")
            builder.appendLine("            pre=\" AND\";")
            builder.appendLine("        }else{")
            builder.appendLine("            pre=\" WHERE\";")
            builder.appendLine("            existsWhere=true;")
            builder.appendLine("        }")
            builder.appendLine("        builder.append(pre+\" ${fi.name}>?\");")
            builder.appendLine("        parameters.add(value);")
            builder.appendLine("        return this;")
            builder.appendLine("    }")

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public FieldValid<${sqlClassName}, ${fi.dataType}> ${fi.lowerCamelName}_gt_fv(${fi.dataType} value){")
            builder.appendLine("        return new FieldValid<>(this, value, () -> ${fi.lowerCamelName}_gt(value));")
            builder.appendLine("    }")

//            builder.appendLine("    /**")
//            builder.appendLine("    * ${fi.comment}")
//            builder.appendLine("    */")
//            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_gt(${fi.dataType} value, IValidatorSuccess<${fi.dataType}> ... ivs){")
//            builder.appendLine("        if(null != ivs){")
//            builder.appendLine("            for(IValidatorSuccess<${fi.dataType}> itm : ivs){")
//            builder.appendLine("                if(!itm.isValidSuccess(value)){")
//            builder.appendLine("                    return this;")
//            builder.appendLine("                }")
//            builder.appendLine("            }")
//            builder.appendLine("        }")
//            builder.appendLine("")
//            builder.appendLine("        return ${fi.lowerCamelName}_gt(value);")
//            builder.appendLine("    }")


            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_notNull_gt(${fi.dataType} value){")
            builder.appendLine("        return ${fi.lowerCamelName}_gt(null != value, value);")
            builder.appendLine("    }")
            if(StrUtil.equalsAny(fi.dataType, "Timestamp")) {
                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment} 把value时间小时及之后的部分舍弃只留年月日,再查询")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_gt_yyyyMMdd(boolean cdn, ${fi.dataType} value){")
                builder.appendLine("        if(!cdn) return this;")
                builder.appendLine("        return ${fi.lowerCamelName}_gt_yyyyMMdd(value);")
                builder.appendLine("    }")
                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment} 把value时间小时及之后的部分舍弃只留年月日,再查询")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_gt_yyyyMMdd(${fi.dataType} value){")
                builder.appendLine("        value=DateUtil.beginOfDay(value).toTimestamp();")
                builder.appendLine("        return ${fi.lowerCamelName}_gt(value);")
                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public FieldValid<${sqlClassName}, ${fi.dataType}> ${fi.lowerCamelName}_gt_yyyyMMdd_fv(${fi.dataType} value){")
                builder.appendLine("        return new FieldValid<>(this, value, () -> ${fi.lowerCamelName}_gt_yyyyMMdd(value));")
                builder.appendLine("    }")

//                builder.appendLine("    /**")
//                builder.appendLine("    * ${fi.comment}")
//                builder.appendLine("    */")
//                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_gt_yyyyMMdd(${fi.dataType} value, IValidatorSuccess<${fi.dataType}> ... ivs){")
//                builder.appendLine("        if(null != ivs){")
//                builder.appendLine("            for(IValidatorSuccess<${fi.dataType}> itm : ivs){")
//                builder.appendLine("                if(!itm.isValidSuccess(value)){")
//                builder.appendLine("                    return this;")
//                builder.appendLine("                }")
//                builder.appendLine("            }")
//                builder.appendLine("        }")
//                builder.appendLine("")
//                builder.appendLine("        return ${fi.lowerCamelName}_gt_yyyyMMdd(value);")
//                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment} 把value时间小时及之后的部分舍弃只留年月日,再查询")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_notNull_gt_yyyyMMdd(${fi.dataType} value){")
                builder.appendLine("        return ${fi.lowerCamelName}_gt_yyyyMMdd(null != value, value);")
                builder.appendLine("    }")
            }


            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_lt(boolean cdn, ${fi.dataType} value){")
            builder.appendLine("        if(!cdn) return this;")
            builder.appendLine("        return ${fi.lowerCamelName}_lt(value);")
            builder.appendLine("    }")
            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_lt(${fi.dataType} value){")
            builder.appendLine("        String pre=\"\";")
            builder.appendLine("        if(existsWhere){")
            builder.appendLine("            pre=\" AND\";")
            builder.appendLine("        }else{")
            builder.appendLine("            pre=\" WHERE\";")
            builder.appendLine("            existsWhere=true;")
            builder.appendLine("        }")
            builder.appendLine("        builder.append(pre+\" ${fi.name}<?\");")
            builder.appendLine("        parameters.add(value);")
            builder.appendLine("        return this;")
            builder.appendLine("    }")

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public FieldValid<${sqlClassName}, ${fi.dataType}> ${fi.lowerCamelName}_lt_fv(${fi.dataType} value){")
            builder.appendLine("        return new FieldValid<>(this, value, () -> ${fi.lowerCamelName}_lt(value));")
            builder.appendLine("    }")
//
//            builder.appendLine("    /**")
//            builder.appendLine("    * ${fi.comment}")
//            builder.appendLine("    */")
//            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_lt(${fi.dataType} value, IValidatorSuccess<${fi.dataType}> ... ivs){")
//            builder.appendLine("        if(null != ivs){")
//            builder.appendLine("            for(IValidatorSuccess<${fi.dataType}> itm : ivs){")
//            builder.appendLine("                if(!itm.isValidSuccess(value)){")
//            builder.appendLine("                    return this;")
//            builder.appendLine("                }")
//            builder.appendLine("            }")
//            builder.appendLine("        }")
//            builder.appendLine("")
//            builder.appendLine("        return ${fi.lowerCamelName}_lt(value);")
//            builder.appendLine("    }")


            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_notNull_lt(${fi.dataType} value){")
            builder.appendLine("        return ${fi.lowerCamelName}_lt(null != value, value);")
            builder.appendLine("    }")
            if(StrUtil.equalsAny(fi.dataType, "Timestamp")) {
                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment} 把value时间小时及之后的部分舍弃只留年月日,再查询")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_lt_yyyyMMdd(boolean cdn, ${fi.dataType} value){")
                builder.appendLine("        if(!cdn) return this;")
                builder.appendLine("        return ${fi.lowerCamelName}_lt_yyyyMMdd(value);")
                builder.appendLine("    }")
                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment} 把value时间小时及之后的部分舍弃只留年月日,再查询")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_lt_yyyyMMdd(${fi.dataType} value){")
                builder.appendLine("        value=DateUtil.beginOfDay(value).toTimestamp();")
                builder.appendLine("        return ${fi.lowerCamelName}_lt(value);")
                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public FieldValid<${sqlClassName}, ${fi.dataType}> ${fi.lowerCamelName}_lt_yyyyMMdd_fv(${fi.dataType} value){")
                builder.appendLine("        return new FieldValid<>(this, value, () -> ${fi.lowerCamelName}_lt_yyyyMMdd(value));")
                builder.appendLine("    }")

//                builder.appendLine("    /**")
//                builder.appendLine("    * ${fi.comment}")
//                builder.appendLine("    */")
//                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_lt_yyyyMMdd(${fi.dataType} value, IValidatorSuccess<${fi.dataType}> ... ivs){")
//                builder.appendLine("        if(null != ivs){")
//                builder.appendLine("            for(IValidatorSuccess<${fi.dataType}> itm : ivs){")
//                builder.appendLine("                if(!itm.isValidSuccess(value)){")
//                builder.appendLine("                    return this;")
//                builder.appendLine("                }")
//                builder.appendLine("            }")
//                builder.appendLine("        }")
//                builder.appendLine("")
//                builder.appendLine("        return ${fi.lowerCamelName}_lt_yyyyMMdd(value);")
//                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment} 把value时间小时及之后的部分舍弃只留年月日,再查询")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_notNull_lt_yyyyMMdd(${fi.dataType} value){")
                builder.appendLine("        return ${fi.lowerCamelName}_lt_yyyyMMdd(null != value, value);")
                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment} 把value时间小时及之后的部分舍弃只留年月日之后加一天,再查询")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_lt_nextDay_yyyyMMdd(boolean cdn, ${fi.dataType} value){")
                builder.appendLine("        if(!cdn) return this;")
                builder.appendLine("        return ${fi.lowerCamelName}_lt_nextDay_yyyyMMdd(value);")
                builder.appendLine("    }")
                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment} 把value时间小时及之后的部分舍弃只留年月日之后加一天,再查询")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_lt_nextDay_yyyyMMdd(${fi.dataType} value){")
                builder.appendLine("        value=DateUtil.beginOfDay(DateUtil.offsetDay(value, 1)).toTimestamp();")
                builder.appendLine("        return ${fi.lowerCamelName}_lt(value);")
                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public FieldValid<${sqlClassName}, ${fi.dataType}> ${fi.lowerCamelName}_lt_nextDay_yyyyMMdd_fv(${fi.dataType} value){")
                builder.appendLine("        return new FieldValid<>(this, value, () -> ${fi.lowerCamelName}_lt_nextDay_yyyyMMdd(value));")
                builder.appendLine("    }")

//                builder.appendLine("    /**")
//                builder.appendLine("    * ${fi.comment}")
//                builder.appendLine("    */")
//                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_lt_nextDay_yyyyMMdd(${fi.dataType} value, IValidatorSuccess<${fi.dataType}> ... ivs){")
//                builder.appendLine("        if(null != ivs){")
//                builder.appendLine("            for(IValidatorSuccess<${fi.dataType}> itm : ivs){")
//                builder.appendLine("                if(!itm.isValidSuccess(value)){")
//                builder.appendLine("                    return this;")
//                builder.appendLine("                }")
//                builder.appendLine("            }")
//                builder.appendLine("        }")
//                builder.appendLine("")
//                builder.appendLine("        return ${fi.lowerCamelName}_lt_nextDay_yyyyMMdd(value);")
//                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment} 把value时间小时及之后的部分舍弃只留年月日之后加一天,再查询")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_notNull_lt_nextDay_yyyyMMdd(${fi.dataType} value){")
                builder.appendLine("        return ${fi.lowerCamelName}_lt_nextDay_yyyyMMdd(null != value, value);")
                builder.appendLine("    }")
            }

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_ge(boolean cdn, ${fi.dataType} value){")
            builder.appendLine("        if(!cdn) return this;")
            builder.appendLine("        return ${fi.lowerCamelName}_ge(value);")
            builder.appendLine("    }")
            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_ge(${fi.dataType} value){")
            builder.appendLine("        String pre=\"\";")
            builder.appendLine("        if(existsWhere){")
            builder.appendLine("            pre=\" AND\";")
            builder.appendLine("        }else{")
            builder.appendLine("            pre=\" WHERE\";")
            builder.appendLine("            existsWhere=true;")
            builder.appendLine("        }")
            builder.appendLine("        builder.append(pre+\" ${fi.name}>=?\");")
            builder.appendLine("        parameters.add(value);")
            builder.appendLine("        return this;")
            builder.appendLine("    }")

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public FieldValid<${sqlClassName}, ${fi.dataType}> ${fi.lowerCamelName}_ge_fv(${fi.dataType} value){")
            builder.appendLine("        return new FieldValid<>(this, value, () -> ${fi.lowerCamelName}_ge(value));")
            builder.appendLine("    }")

//            builder.appendLine("    /**")
//            builder.appendLine("    * ${fi.comment}")
//            builder.appendLine("    */")
//            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_ge(${fi.dataType} value, IValidatorSuccess<${fi.dataType}> ... ivs){")
//            builder.appendLine("        if(null != ivs){")
//            builder.appendLine("            for(IValidatorSuccess<${fi.dataType}> itm : ivs){")
//            builder.appendLine("                if(!itm.isValidSuccess(value)){")
//            builder.appendLine("                    return this;")
//            builder.appendLine("                }")
//            builder.appendLine("            }")
//            builder.appendLine("        }")
//            builder.appendLine("")
//            builder.appendLine("        return ${fi.lowerCamelName}_ge(value);")
//            builder.appendLine("    }")

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_notNull_ge(${fi.dataType} value){")
            builder.appendLine("        return ${fi.lowerCamelName}_ge(null != value, value);")
            builder.appendLine("    }")
            if(StrUtil.equalsAny(fi.dataType, "Timestamp")) {
                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment} 把value时间小时及之后的部分舍弃只留年月日,再查询")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_ge_yyyyMMdd(boolean cdn, ${fi.dataType} value){")
                builder.appendLine("        if(!cdn) return this;")
                builder.appendLine("        return ${fi.lowerCamelName}_ge_yyyyMMdd(value);")
                builder.appendLine("    }")
                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment} 把value时间小时及之后的部分舍弃只留年月日,再查询")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_ge_yyyyMMdd(${fi.dataType} value){")
                builder.appendLine("        value=DateUtil.beginOfDay(value).toTimestamp();")
                builder.appendLine("        return ${fi.lowerCamelName}_ge(value);")
                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public FieldValid<${sqlClassName}, ${fi.dataType}> ${fi.lowerCamelName}_ge_yyyyMMdd_fv(${fi.dataType} value){")
                builder.appendLine("        return new FieldValid<>(this, value, () -> ${fi.lowerCamelName}_ge_yyyyMMdd(value));")
                builder.appendLine("    }")

//                builder.appendLine("    /**")
//                builder.appendLine("    * ${fi.comment}")
//                builder.appendLine("    */")
//                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_ge_yyyyMMdd(${fi.dataType} value, IValidatorSuccess<${fi.dataType}> ... ivs){")
//                builder.appendLine("        if(null != ivs){")
//                builder.appendLine("            for(IValidatorSuccess<${fi.dataType}> itm : ivs){")
//                builder.appendLine("                if(!itm.isValidSuccess(value)){")
//                builder.appendLine("                    return this;")
//                builder.appendLine("                }")
//                builder.appendLine("            }")
//                builder.appendLine("        }")
//                builder.appendLine("")
//                builder.appendLine("        return ${fi.lowerCamelName}_ge_yyyyMMdd(value);")
//                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment} 把value时间小时及之后的部分舍弃只留年月日,再查询")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_notNull_ge_yyyyMMdd(${fi.dataType} value){")
                builder.appendLine("        return ${fi.lowerCamelName}_ge_yyyyMMdd(null != value, value);")
                builder.appendLine("    }")
            }

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_le(boolean cdn, ${fi.dataType} value){")
            builder.appendLine("        if(!cdn) return this;")
            builder.appendLine("        return ${fi.lowerCamelName}_le(value);")
            builder.appendLine("    }")
            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_le(${fi.dataType} value){")
            builder.appendLine("        String pre=\"\";")
            builder.appendLine("        if(existsWhere){")
            builder.appendLine("            pre=\" AND\";")
            builder.appendLine("        }else{")
            builder.appendLine("            pre=\" WHERE\";")
            builder.appendLine("            existsWhere=true;")
            builder.appendLine("        }")
            builder.appendLine("        builder.append(pre+\" ${fi.name}<=?\");")
            builder.appendLine("        parameters.add(value);")
            builder.appendLine("        return this;")
            builder.appendLine("    }")

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public FieldValid<${sqlClassName}, ${fi.dataType}> ${fi.lowerCamelName}_le_fv(${fi.dataType} value){")
            builder.appendLine("        return new FieldValid<>(this, value, () -> ${fi.lowerCamelName}_le(value));")
            builder.appendLine("    }")

//            builder.appendLine("    /**")
//            builder.appendLine("    * ${fi.comment}")
//            builder.appendLine("    */")
//            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_le(${fi.dataType} value, IValidatorSuccess<${fi.dataType}> ... ivs){")
//            builder.appendLine("        if(null != ivs){")
//            builder.appendLine("            for(IValidatorSuccess<${fi.dataType}> itm : ivs){")
//            builder.appendLine("                if(!itm.isValidSuccess(value)){")
//            builder.appendLine("                    return this;")
//            builder.appendLine("                }")
//            builder.appendLine("            }")
//            builder.appendLine("        }")
//            builder.appendLine("")
//            builder.appendLine("        return ${fi.lowerCamelName}_le(value);")
//            builder.appendLine("    }")

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_notNull_le(${fi.dataType} value){")
            builder.appendLine("        return ${fi.lowerCamelName}_le(null != value, value);")
            builder.appendLine("    }")
            if(StrUtil.equalsAny(fi.dataType, "Timestamp")) {
                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment} 把value时间小时及之后的部分舍弃只留年月日,再查询")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_le_yyyyMMdd(boolean cdn, ${fi.dataType} value){")
                builder.appendLine("        if(!cdn) return this;")
                builder.appendLine("        return ${fi.lowerCamelName}_le_yyyyMMdd(value);")
                builder.appendLine("    }")
                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment} 把value时间小时及之后的部分舍弃只留年月日,再查询")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_le_yyyyMMdd(${fi.dataType} value){")
                builder.appendLine("        value=DateUtil.beginOfDay(value).toTimestamp();")
                builder.appendLine("        return ${fi.lowerCamelName}_le(value);")
                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public FieldValid<${sqlClassName}, ${fi.dataType}> ${fi.lowerCamelName}_le_yyyyMMdd_fv(${fi.dataType} value){")
                builder.appendLine("        return new FieldValid<>(this, value, () -> ${fi.lowerCamelName}_le_yyyyMMdd(value));")
                builder.appendLine("    }")

//                builder.appendLine("    /**")
//                builder.appendLine("    * ${fi.comment}")
//                builder.appendLine("    */")
//                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_le_yyyyMMdd(${fi.dataType} value, IValidatorSuccess<${fi.dataType}> ... ivs){")
//                builder.appendLine("        if(null != ivs){")
//                builder.appendLine("            for(IValidatorSuccess<${fi.dataType}> itm : ivs){")
//                builder.appendLine("                if(!itm.isValidSuccess(value)){")
//                builder.appendLine("                    return this;")
//                builder.appendLine("                }")
//                builder.appendLine("            }")
//                builder.appendLine("        }")
//                builder.appendLine("")
//                builder.appendLine("        return ${fi.lowerCamelName}_le_yyyyMMdd(value);")
//                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment} 把value时间小时及之后的部分舍弃只留年月日,再查询")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_notNull_le_yyyyMMdd(${fi.dataType} value){")
                builder.appendLine("        return ${fi.lowerCamelName}_le_yyyyMMdd(null != value, value);")
                builder.appendLine("    }")
            }

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_ne(boolean cdn, ${fi.dataType} value){")
            builder.appendLine("        if(!cdn) return this;")
            builder.appendLine("        return ${fi.lowerCamelName}_ne(value);")
            builder.appendLine("    }")
            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_ne(${fi.dataType} value){")
            builder.appendLine("        String pre=\"\";")
            builder.appendLine("        if(existsWhere){")
            builder.appendLine("            pre=\" AND\";")
            builder.appendLine("        }else{")
            builder.appendLine("            pre=\" WHERE\";")
            builder.appendLine("            existsWhere=true;")
            builder.appendLine("        }")
            builder.appendLine("        builder.append(pre+\" ${fi.name}<>?\");")
            builder.appendLine("        parameters.add(value);")
            builder.appendLine("        return this;")
            builder.appendLine("    }")

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public FieldValid<${sqlClassName}, ${fi.dataType}> ${fi.lowerCamelName}_ne_fv(${fi.dataType} value){")
            builder.appendLine("        return new FieldValid<>(this, value, () -> ${fi.lowerCamelName}_ne(value));")
            builder.appendLine("    }")

//            builder.appendLine("    /**")
//            builder.appendLine("    * ${fi.comment}")
//            builder.appendLine("    */")
//            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_ne(${fi.dataType} value, IValidatorSuccess<${fi.dataType}> ... ivs){")
//            builder.appendLine("        if(null != ivs){")
//            builder.appendLine("            for(IValidatorSuccess<${fi.dataType}> itm : ivs){")
//            builder.appendLine("                if(!itm.isValidSuccess(value)){")
//            builder.appendLine("                    return this;")
//            builder.appendLine("                }")
//            builder.appendLine("            }")
//            builder.appendLine("        }")
//            builder.appendLine("")
//            builder.appendLine("        return ${fi.lowerCamelName}_ne(value);")
//            builder.appendLine("    }")


            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_notNull_ne(${fi.dataType} value){")
            builder.appendLine("        return ${fi.lowerCamelName}_ne(null != value, value);")
            builder.appendLine("    }")
            if(StrUtil.equalsAny(fi.dataType, "Timestamp")) {
                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment} 把value时间小时及之后的部分舍弃只留年月日,再查询")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_ne_yyyyMMdd(boolean cdn, ${fi.dataType} value){")
                builder.appendLine("        if(!cdn) return this;")
                builder.appendLine("        return ${fi.lowerCamelName}_ne_yyyyMMdd(value);")
                builder.appendLine("    }")
                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment} 把value时间小时及之后的部分舍弃只留年月日,再查询")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_ne_yyyyMMdd(${fi.dataType} value){")
                builder.appendLine("        value=DateUtil.beginOfDay(value).toTimestamp();")
                builder.appendLine("        return ${fi.lowerCamelName}_ne(value);")
                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public FieldValid<${sqlClassName}, ${fi.dataType}> ${fi.lowerCamelName}_ne_yyyyMMdd_fv(${fi.dataType} value){")
                builder.appendLine("        return new FieldValid<>(this, value, () -> ${fi.lowerCamelName}_ne_yyyyMMdd(value));")
                builder.appendLine("    }")

//                builder.appendLine("    /**")
//                builder.appendLine("    * ${fi.comment}")
//                builder.appendLine("    */")
//                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_ne_yyyyMMdd(${fi.dataType} value, IValidatorSuccess<${fi.dataType}> ... ivs){")
//                builder.appendLine("        if(null != ivs){")
//                builder.appendLine("            for(IValidatorSuccess<${fi.dataType}> itm : ivs){")
//                builder.appendLine("                if(!itm.isValidSuccess(value)){")
//                builder.appendLine("                    return this;")
//                builder.appendLine("                }")
//                builder.appendLine("            }")
//                builder.appendLine("        }")
//                builder.appendLine("")
//                builder.appendLine("        return ${fi.lowerCamelName}_ne_yyyyMMdd(value);")
//                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment} 把value时间小时及之后的部分舍弃只留年月日,再查询")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_notNull_ne_yyyyMMdd(${fi.dataType} value){")
                builder.appendLine("        return ${fi.lowerCamelName}_ne_yyyyMMdd(null != value, value);")
                builder.appendLine("    }")
            }

            if(StrUtil.equalsAny(fi.dataType, "String")) {

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_notBlank_eq(${fi.dataType} value){")
                builder.appendLine("        return ${fi.lowerCamelName}_eq(StrUtil.isNotBlank(value), value);")
                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_leftLike(boolean cdn, String value){")
                builder.appendLine("        if(!cdn) return this;")
                builder.appendLine("        return ${fi.lowerCamelName}_leftLike(value);")
                builder.appendLine("    }")
                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_leftLike(String value){")
                builder.appendLine("        String pre=\"\";")
                builder.appendLine("        if(existsWhere){")
                builder.appendLine("            pre=\" AND\";")
                builder.appendLine("        }else{")
                builder.appendLine("            pre=\" WHERE\";")
                builder.appendLine("            existsWhere=true;")
                builder.appendLine("        }")
                builder.appendLine("        builder.append(pre+\" ${fi.name} like ?\");")
                builder.appendLine("        parameters.add(value+\"%\");")
                builder.appendLine("        return this;")
                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public FieldValid<${sqlClassName}, ${fi.dataType}> ${fi.lowerCamelName}_leftLike_fv(${fi.dataType} value){")
                builder.appendLine("        return new FieldValid<>(this, value, () -> ${fi.lowerCamelName}_leftLike(value));")
                builder.appendLine("    }")

//                builder.appendLine("    /**")
//                builder.appendLine("    * ${fi.comment}")
//                builder.appendLine("    */")
//                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_leftLike(${fi.dataType} value, IValidatorSuccess<${fi.dataType}> ... ivs){")
//                builder.appendLine("        if(null != ivs){")
//                builder.appendLine("            for(IValidatorSuccess<${fi.dataType}> itm : ivs){")
//                builder.appendLine("                if(!itm.isValidSuccess(value)){")
//                builder.appendLine("                    return this;")
//                builder.appendLine("                }")
//                builder.appendLine("            }")
//                builder.appendLine("        }")
//                builder.appendLine("")
//                builder.appendLine("        return ${fi.lowerCamelName}_leftLike(value);")
//                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_notBlank_leftLike(${fi.dataType} value){")
                builder.appendLine("        return ${fi.lowerCamelName}_leftLike(StrUtil.isNotBlank(value), value);")
                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_rightLike(boolean cdn, String value){")
                builder.appendLine("        if(!cdn) return this;")
                builder.appendLine("        return ${fi.lowerCamelName}_rightLike(value);")
                builder.appendLine("    }")
                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_rightLike(String value){")
                builder.appendLine("        String pre=\"\";")
                builder.appendLine("        if(existsWhere){")
                builder.appendLine("            pre=\" AND\";")
                builder.appendLine("        }else{")
                builder.appendLine("            pre=\" WHERE\";")
                builder.appendLine("            existsWhere=true;")
                builder.appendLine("        }")
                builder.appendLine("        builder.append(pre+\" ${fi.name} like ?\");")
                builder.appendLine("        parameters.add(\"%\"+value);")
                builder.appendLine("        return this;")
                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public FieldValid<${sqlClassName}, ${fi.dataType}> ${fi.lowerCamelName}_rightLike_fv(${fi.dataType} value){")
                builder.appendLine("        return new FieldValid<>(this, value, () -> ${fi.lowerCamelName}_rightLike(value));")
                builder.appendLine("    }")

//                builder.appendLine("    /**")
//                builder.appendLine("    * ${fi.comment}")
//                builder.appendLine("    */")
//                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_rightLike(${fi.dataType} value, IValidatorSuccess<${fi.dataType}> ... ivs){")
//                builder.appendLine("        if(null != ivs){")
//                builder.appendLine("            for(IValidatorSuccess<${fi.dataType}> itm : ivs){")
//                builder.appendLine("                if(!itm.isValidSuccess(value)){")
//                builder.appendLine("                    return this;")
//                builder.appendLine("                }")
//                builder.appendLine("            }")
//                builder.appendLine("        }")
//                builder.appendLine("")
//                builder.appendLine("        return ${fi.lowerCamelName}_rightLike(value);")
//                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_notBlank_rightLike(${fi.dataType} value){")
                builder.appendLine("        return ${fi.lowerCamelName}_rightLike(StrUtil.isNotBlank(value), value);")
                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_middleLike(boolean cdn, String value){")
                builder.appendLine("        if(!cdn) return this;")
                builder.appendLine("        return ${fi.lowerCamelName}_middleLike(value);")
                builder.appendLine("    }")
                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_middleLike(String value){")
                builder.appendLine("        String pre=\"\";")
                builder.appendLine("        if(existsWhere){")
                builder.appendLine("            pre=\" AND\";")
                builder.appendLine("        }else{")
                builder.appendLine("            pre=\" WHERE\";")
                builder.appendLine("            existsWhere=true;")
                builder.appendLine("        }")
                builder.appendLine("        builder.append(pre+\" ${fi.name} like ?\");")
                builder.appendLine("        parameters.add(\"%\"+value+\"%\");")
                builder.appendLine("        return this;")
                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public FieldValid<${sqlClassName}, ${fi.dataType}> ${fi.lowerCamelName}_middleLike_fv(${fi.dataType} value){")
                builder.appendLine("        return new FieldValid<>(this, value, () -> ${fi.lowerCamelName}_middleLike(value));")
                builder.appendLine("    }")

//                builder.appendLine("    /**")
//                builder.appendLine("    * ${fi.comment}")
//                builder.appendLine("    */")
//                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_middleLike(${fi.dataType} value, IValidatorSuccess<${fi.dataType}> ... ivs){")
//                builder.appendLine("        if(null != ivs){")
//                builder.appendLine("            for(IValidatorSuccess<${fi.dataType}> itm : ivs){")
//                builder.appendLine("                if(!itm.isValidSuccess(value)){")
//                builder.appendLine("                    return this;")
//                builder.appendLine("                }")
//                builder.appendLine("            }")
//                builder.appendLine("        }")
//                builder.appendLine("")
//                builder.appendLine("        return ${fi.lowerCamelName}_middleLike(value);")
//                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_notBlank_middleLike(${fi.dataType} value){")
                builder.appendLine("        return ${fi.lowerCamelName}_middleLike(StrUtil.isNotBlank(value), value);")
                builder.appendLine("    }")
            }

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_in(boolean cdn, Set<Object> values){")
            builder.appendLine("        if(!cdn) return this;")
            builder.appendLine("        return ${fi.lowerCamelName}_in(values);")
            builder.appendLine("    }")
            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_in(Set<Object> values){")
            builder.appendLine("        if(null == values || values.isEmpty()){")
            builder.appendLine("            throw new RuntimeException(\"values is empty\");")
            builder.appendLine("        }")
            builder.appendLine("        String pre=\"\";")
            builder.appendLine("        if(existsWhere){")
            builder.appendLine("            pre=\" AND\";")
            builder.appendLine("        }else{")
            builder.appendLine("            pre=\" WHERE\";")
            builder.appendLine("            existsWhere=true;")
            builder.appendLine("        }")
            builder.appendLine("        String txt = StrUtil.repeatAndJoin(\"?\", values.size(), \",\");")
            builder.appendLine("        builder.append(pre+\" ${fi.name} in (\"+txt+\")\");")
            builder.appendLine("        parameters.addAll(values);")
            builder.appendLine("        return this;")
            builder.appendLine("    }")

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public FieldValid<${sqlClassName}, Set<Object>> ${fi.lowerCamelName}_in_fv(Set<Object> value){")
            builder.appendLine("        return new FieldValid<>(this, value, () -> ${fi.lowerCamelName}_in(value));")
            builder.appendLine("    }")

//            builder.appendLine("    /**")
//            builder.appendLine("    * ${fi.comment}")
//            builder.appendLine("    */")
//            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_in(Set<Object> value, IValidatorSuccess<Set<Object>> ... ivs){")
//            builder.appendLine("        if(null != ivs){")
//            builder.appendLine("            for(IValidatorSuccess<Set<Object>> itm : ivs){")
//            builder.appendLine("                if(!itm.isValidSuccess(value)){")
//            builder.appendLine("                    return this;")
//            builder.appendLine("                }")
//            builder.appendLine("            }")
//            builder.appendLine("        }")
//            builder.appendLine("")
//            builder.appendLine("        return ${fi.lowerCamelName}_in(value);")
//            builder.appendLine("    }")

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_notEmpty_in(Set<Object> values){")
            builder.appendLine("        return ${fi.lowerCamelName}_in(null != values && !values.isEmpty(), values);")
            builder.appendLine("    }")

            if(fi.ref != ""){
                val refClassName= CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, fi.ref)
                val refLowerColumnName= CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, fi.refColumn)
                val refUpperColumnName= CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, fi.refColumn)

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_in(boolean cdn, List<${refClassName}> entities){")
                builder.appendLine("        if(!cdn) return this;")
                builder.appendLine("        return ${fi.lowerCamelName}_in(entities);")
                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_in(List<${refClassName}> entities){")
                builder.appendLine("        if(null==entities || entities.size()<=0){")
                builder.appendLine("            throw new RuntimeException(\"entities 必须拥有有效的元素\");")
                builder.appendLine("        }")
                builder.appendLine("        final Set<Object> vals = entities.stream().filter(it -> null != it.get${refUpperColumnName}()).map(${refClassName}::get${refUpperColumnName}).collect(Collectors.toSet());")
                builder.appendLine("        if(vals.isEmpty()){")
                builder.appendLine("            throw new RuntimeException(\"entities 必须拥有有效的${refLowerColumnName}元素\");")
                builder.appendLine("        }")
                builder.appendLine("        return ${fi.lowerCamelName}_in(vals);")
                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public FieldValid<${sqlClassName}, List<${refClassName}>> ${fi.lowerCamelName}_in_fv(List<${refClassName}> value){")
                builder.appendLine("        return new FieldValid<>(this, value, () -> ${fi.lowerCamelName}_in(value));")
                builder.appendLine("    }")

//                builder.appendLine("    /**")
//                builder.appendLine("    * ${fi.comment}")
//                builder.appendLine("    */")
//                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_in(List<${refClassName}> value, IValidatorSuccess<List<${refClassName}>> ... ivs){")
//                builder.appendLine("        if(null != ivs){")
//                builder.appendLine("            for(IValidatorSuccess<List<${refClassName}>> itm : ivs){")
//                builder.appendLine("                if(!itm.isValidSuccess(value)){")
//                builder.appendLine("                    return this;")
//                builder.appendLine("                }")
//                builder.appendLine("            }")
//                builder.appendLine("        }")
//                builder.appendLine("")
//                builder.appendLine("        return ${fi.lowerCamelName}_in(value);")
//                builder.appendLine("    }")

                builder.appendLine("    /**")
                builder.appendLine("    * ${fi.comment}")
                builder.appendLine("    */")
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_notEmpty_in(List<${refClassName}> entities){")
                builder.appendLine("        return ${fi.lowerCamelName}_in(null != entities && !entities.isEmpty(), entities);")
                builder.appendLine("    }")
            }


            builder.appendLine("")
            if(fi.annos.any{it.name=="Increment"}){
                builder.appendLine("    public ${sqlClassName} ${fi.lowerCamelName}_inc(${fi.dataType} value){")
                builder.appendLine("        this.addIncValue(\"${fi.name}\", value);")
                builder.appendLine("        return this;")
                builder.appendLine("    }")
            }
            builder.appendLine("")

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} orderBy_${fi.lowerCamelName}_asc(){")
            builder.appendLine("        String pre=\"\";")
            builder.appendLine("        if(existsOrderBy){")
            builder.appendLine("            pre=\",\";")
            builder.appendLine("        }else{")
            builder.appendLine("            pre=\" order by\";")
            builder.appendLine("            existsOrderBy=true;")
            builder.appendLine("        }")
            builder.appendLine("        orderBuilder.append(pre+\" ${fi.name} asc\");")
            builder.appendLine("        return this;")
            builder.appendLine("    }")

            builder.appendLine("    /**")
            builder.appendLine("    * ${fi.comment}")
            builder.appendLine("    */")
            builder.appendLine("    public ${sqlClassName} orderBy_${fi.lowerCamelName}_desc(){")
            builder.appendLine("        String pre=\"\";")
            builder.appendLine("        if(existsOrderBy){")
            builder.appendLine("            pre=\",\";")
            builder.appendLine("        }else{")
            builder.appendLine("            pre=\" order by\";")
            builder.appendLine("            existsOrderBy=true;")
            builder.appendLine("        }")
            builder.appendLine("        orderBuilder.append(pre+\" ${fi.name} desc\");")
            builder.appendLine("        return this;")
            builder.appendLine("    }")

        }
        builder.appendLine("    @Override")
        builder.appendLine("    public String toSqlString() {")
        builder.appendLine("        StringBuilder buf=new StringBuilder(\"SELECT * FROM ${name}\");")
        builder.appendLine("        buf.append(builder);")
        builder.appendLine("        buf.append(orderBuilder);")
        builder.appendLine("        return buf.toString();")
        builder.appendLine("    }")
        builder.appendLine("    @Override")
        builder.appendLine("    public String toSqlString(int start, int limit) {")
        builder.appendLine("        StringBuilder buf=new StringBuilder(\"SELECT * FROM ${name}\");")
        builder.appendLine("        buf.append(builder);")
        builder.appendLine("        buf.append(orderBuilder);")
        builder.appendLine("        buf.append(\" limit \");")
        builder.appendLine("        buf.append(start);")
        builder.appendLine("        buf.append(\", \");")
        builder.appendLine("        buf.append(limit);")
        builder.appendLine("        return buf.toString();")
        builder.appendLine("    }")
        builder.appendLine("    @Override")
        builder.appendLine("    public String toCountSqlString() {")
        builder.appendLine("        StringBuilder buf=new StringBuilder(\"SELECT COUNT(1) FROM ${name}\");")
        builder.appendLine("        buf.append(builder);")
        builder.appendLine("        return buf.toString();")
        builder.appendLine("    }")
        builder.appendLine("    @Override")
        builder.appendLine("    public List<Object> getParameters() {")
        builder.appendLine("        return this.parameters;")
        builder.appendLine("    }")
        builder.appendLine("}")
        val toFile = Path(this.queryDir, "${sqlClassName}.java").toFile()
        FileUtil.writeUtf8String(builder.toString(), toFile)
    }

    fun buildListInterface(){
        val builder = StringBuilder()
        builder.appendLine("package ${this.entityPkg};")
        builder.appendLine()
        builder.appendLine("import java.util.List;")
        builder.appendLine("import java.math.BigDecimal;")
        builder.appendLine("import java.sql.Timestamp;")
        builder.appendLine("/**")
        builder.appendLine("* ${this.comment}")
        builder.appendLine("*/")

        builder.appendLine("public interface ${listInterfaceName} extends List<${className}>{")


        for(fi in fields){
            val tab="    "
            builder.appendLine("${tab}/**")
            builder.appendLine("${tab}* ${fi.comment}")
            builder.appendLine("${tab}*/")
            builder.appendLine("${tab}List<${fi.dataType}> ${fi.lowerCamelName}List();")
            builder.appendLine("${tab}/**")
            builder.appendLine("${tab}* ${fi.comment}")
            builder.appendLine("${tab}*/")
            builder.appendLine("${tab}List<${fi.dataType}> ${fi.lowerCamelName}List_skipNull();")
            if(StrUtil.equalsAny(fi.dataType, "String")) {
                builder.appendLine("${tab}/**")
                builder.appendLine("${tab}* ${fi.comment}")
                builder.appendLine("${tab}*/")
                builder.appendLine("${tab}List<${fi.dataType}> ${fi.lowerCamelName}List_skipBlank();")
            }
            if(fi.ref != ""){
                val refClassName= CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, fi.ref)
                val refListInterfaceName="I${refClassName}List"
                val refLowerColumnName= CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, fi.refColumn)
                val refUpperColumnName= CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, fi.refColumn)

                builder.appendLine("${tab}/**")
                builder.appendLine("${tab}* ${fi.comment}")
                builder.appendLine("${tab}*/")
                builder.appendLine("${tab}${refListInterfaceName} ${fi.lowerCamelName}EntityList();")

            }

        }

        builder.appendLine("}")
        val toFile = Path(this.entityDir, "${listInterfaceName}.java").toFile()
        FileUtil.writeUtf8String(builder.toString(), toFile)
    }
    fun buildList(){

    }
}